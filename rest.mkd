# REST

## constraints to allow "components" to interact

components are not necessarily "client"and "server"

- client-server architecture
- stateless
- cacheable
- uniform interfaces
  - identification of resources
  - resources as representations
  - self-descriptive messages
  - hypertext as the engine of application state
- layered systems
- code on demand

## making these constraints more concrete

Let's pick a protocol. "A RESTAPI **should not be dependent on any single
communication protocol.** We're using (\*gasp\*) HTTP.

### diving into HTTP

Fiddler (Win), Charles (Mac), Telnet (GNU/Linux)

#### Request 

    <Method><Request URI><Version>
    <Headers>
    <Body>


#### Response

    <Version><Status code><Reason Phrase>
    <Headers>
    <Body.

#### Methods

Common in front-end

- GET (safe: RO)
- POST

Also specified (in RFC2616)

- OPTIONS
- HEAD (safe: RO)
- PUT
- DELETE
- TRACE
- CONNECT

(RFC5789)

- PATCH: updating just one portion of a resource (great for document store with front-end MVC!)

_Safe_ (read-only; no effect to resources...): GET, HEAD
_Idempotent_ (multiple requests will get the same response): GET, OPTIONS, HEAD, PUT, TRACE, CONNECT  
scoped to the client and server, 

#### Statuses

1XX - informational
2XX - successful
3XX - redirection
4XX - client error
500 - server error

#### Headers

Request headers:

Authorization, Content-type, Accept  
...lots of them

Response Headers, too!

By the way, custom "X-" headers are officially banned.

### How well does HTTP map onto REST

- client-server architecture - :)
- stateless - :) ...as long as you don't use Sessions or Cookies
- cacheable - :) request with cached date, 304 unmodified, etc.
- uniform interfaces
  - identification of resources
    - "a resource is any interesting entity in your system"
      - e.g. employee, store, cart, transaction, owl
    - "if your URL has verbs in it, you're doing it wrong"
  - resources as representations
    - media types
      - "Accept" header for the format of the **representation** to be received
      - "Content-type" header identifying the format of the request body
      - it's **OK** to create your own media type
        - e.g. "application/vnd.ZooCo.Owl.v2+json"
      - Response status 415 "unsupported media type"... what else ya got?
  - self-descriptive messages
  - hypertext as the engine of application state
- layered systems
- code on demand
